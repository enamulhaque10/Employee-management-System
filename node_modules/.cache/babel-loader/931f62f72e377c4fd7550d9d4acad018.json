{"ast":null,"code":"var _jsxFileName = \"/home/shawon/frontend-template/src/views/country/CountryAdd.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faList } from \"@fortawesome/free-solid-svg-icons\";\nimport { Formik } from \"formik\";\nimport { Country } from \"./Country\";\nimport { Button, Card } from \"@themesberg/react-bootstrap\";\nimport { DefaultCard } from \"../../components/card\";\nimport CountryForm from \"./CountryForm\";\nimport ProgressBar from \"react-topbar-progress-indicator\";\nimport { callApi, selectApi } from \"../../reducers/apiSlice\";\nimport './Country.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CountryAdd = () => {\n  _s();\n\n  /**\n   * useDispatch: dispatch actions\n   */\n  const dispatch = useDispatch();\n  /**\n   * Get loading indicator from 'selectApi' state\n   */\n\n  const {\n    loading\n  } = useSelector(selectApi);\n  /**\n   * cardProps must need to pass into DefaultCard component.\n   * headerSlot: this is a placeholder for action buttons on card header.\n   *\n   * @type {{headerSlot: (function(): *), title: string}}\n   */\n\n  const cardProps = {\n    title: 'Add New Country',\n    headerSlot: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/country\",\n        activeClassName: \"active\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          className: \"f-right btn-sm p-5\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faList,\n            className: \"me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 7\n          }, this), \" View Country List\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  };\n  return /*#__PURE__*/_jsxDEV(DefaultCard, {\n    className: \"mb-50\",\n    ...cardProps,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      border: \"white\",\n      className: \"table-wrapper table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [loading && /*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: Country,\n          validationSchema: Country.validator(),\n          onSubmit: (values, {\n            resetForm\n          }) => {\n            /**\n             * Save data through POST api by dispatching 'callApi'\n             */\n            dispatch(callApi({\n              operationId: 'country/save',\n              output: 'data',\n              parameters: {\n                method: 'POST',\n                body: Country.toString(values)\n              }\n            }));\n            /**\n             * Reset form data.\n             */\n\n            resetForm({});\n          },\n          children: /*#__PURE__*/_jsxDEV(CountryForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CountryAdd, \"8vFyghKnIhaJznhAHW/5CMc+BTM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CountryAdd;\nexport default CountryAdd;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryAdd\");","map":{"version":3,"sources":["/home/shawon/frontend-template/src/views/country/CountryAdd.js"],"names":["React","Link","useDispatch","useSelector","FontAwesomeIcon","faList","Formik","Country","Button","Card","DefaultCard","CountryForm","ProgressBar","callApi","selectApi","CountryAdd","dispatch","loading","cardProps","title","headerSlot","validator","values","resetForm","operationId","output","parameters","method","body","toString"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,MAAR,QAAqB,mCAArB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,6BAA3B;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SAAQC,OAAR,EAAiBC,SAAjB,QAAiC,yBAAjC;AAEA,OAAO,gBAAP;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAExB;AACD;AACA;AACC,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA;AACD;AACA;;AACC,QAAM;AAACe,IAAAA;AAAD,MAAYd,WAAW,CAACW,SAAD,CAA7B;AAEA;AACD;AACA;AACA;AACA;AACA;;AACC,QAAMI,SAAS,GAAG;AACjBC,IAAAA,KAAK,EAAE,iBADU;AAEjBC,IAAAA,UAAU,EAAE,mBACX;AAAA,6BACC,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,UAAT;AAAoB,QAAA,eAAe,EAAC,QAApC;AAAA,+BACC,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,MAAhB;AAAuB,UAAA,SAAS,EAAC,oBAAjC;AAAA,kCACC,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAEf,MAAvB;AAA+B,YAAA,SAAS,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,kBADD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAHgB,GAAlB;AAaA,sBACC,QAAC,WAAD;AAAa,IAAA,SAAS,EAAC,OAAvB;AAAA,OAAmCa,SAAnC;AAAA,2BACC,QAAC,IAAD;AAAM,MAAA,MAAM,EAAC,OAAb;AAAqB,MAAA,SAAS,EAAC,gCAA/B;AAAA,6BACC,QAAC,IAAD,CAAM,IAAN;AAAA,mBACED,OAAO,iBACR,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFD,eAIC,QAAC,MAAD;AACC,UAAA,aAAa,EAAEV,OADhB;AAEC,UAAA,gBAAgB,EAAEA,OAAO,CAACc,SAAR,EAFnB;AAGC,UAAA,QAAQ,EAAE,CAACC,MAAD,EAAS;AAACC,YAAAA;AAAD,WAAT,KAAyB;AAElC;AACP;AACA;AACOP,YAAAA,QAAQ,CAACH,OAAO,CAAC;AAChBW,cAAAA,WAAW,EAAE,cADG;AAEhBC,cAAAA,MAAM,EAAE,MAFQ;AAGhBC,cAAAA,UAAU,EAAE;AACXC,gBAAAA,MAAM,EAAE,MADG;AAEXC,gBAAAA,IAAI,EAAErB,OAAO,CAACsB,QAAR,CAAiBP,MAAjB;AAFK;AAHI,aAAD,CAAR,CAAR;AASA;AACP;AACA;;AACOC,YAAAA,SAAS,CAAC,EAAD,CAAT;AAEA,WAtBF;AAAA,iCAwBC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAxBD;AAAA;AAAA;AAAA;AAAA,gBAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAsCA,CArED;;GAAMR,U;UAKYb,W,EAKCC,W;;;KAVbY,U;AAuEN,eAAeA,UAAf","sourcesContent":["import * as React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faList} from \"@fortawesome/free-solid-svg-icons\";\nimport {Formik} from \"formik\";\nimport {Country} from \"./Country\";\nimport {Button, Card} from \"@themesberg/react-bootstrap\";\nimport {DefaultCard} from \"../../components/card\";\nimport CountryForm from \"./CountryForm\";\nimport ProgressBar from \"react-topbar-progress-indicator\";\nimport {callApi, selectApi} from \"../../reducers/apiSlice\";\n\nimport './Country.scss'\n\nconst CountryAdd = () => {\n\n\t/**\n\t * useDispatch: dispatch actions\n\t */\n\tconst dispatch = useDispatch();\n\n\t/**\n\t * Get loading indicator from 'selectApi' state\n\t */\n\tconst {loading} = useSelector(selectApi);\n\n\t/**\n\t * cardProps must need to pass into DefaultCard component.\n\t * headerSlot: this is a placeholder for action buttons on card header.\n\t *\n\t * @type {{headerSlot: (function(): *), title: string}}\n\t */\n\tconst cardProps = {\n\t\ttitle: 'Add New Country',\n\t\theaderSlot: () => (\n\t\t\t<>\n\t\t\t\t<Link to='/country' activeClassName=\"active\">\n\t\t\t\t\t<Button variant=\"link\" className=\"f-right btn-sm p-5\">\n\t\t\t\t\t\t<FontAwesomeIcon icon={faList} className=\"me-2\"/> View Country List\n\t\t\t\t\t</Button>\n\t\t\t\t</Link>\n\t\t\t</>\n\t\t)\n\t};\n\n\treturn (\n\t\t<DefaultCard className=\"mb-50\" {...cardProps}>\n\t\t\t<Card border=\"white\" className=\"table-wrapper table-responsive\">\n\t\t\t\t<Card.Body>\n\t\t\t\t\t{loading &&\n\t\t\t\t\t<ProgressBar/>\n\t\t\t\t\t}\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={Country}\n\t\t\t\t\t\tvalidationSchema={Country.validator()}\n\t\t\t\t\t\tonSubmit={(values, {resetForm}) => {\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Save data through POST api by dispatching 'callApi'\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tdispatch(callApi({\n\t\t\t\t\t\t\t\toperationId: 'country/save',\n\t\t\t\t\t\t\t\toutput: 'data',\n\t\t\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\tbody: Country.toString(values)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Reset form data.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tresetForm({});\n\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CountryForm/>\n\t\t\t\t\t</Formik>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t</DefaultCard>\n\t)\n\n};\n\nexport default CountryAdd;"]},"metadata":{},"sourceType":"module"}