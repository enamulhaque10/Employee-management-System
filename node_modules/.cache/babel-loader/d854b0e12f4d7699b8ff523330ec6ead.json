{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { failed, succeed } from '../reducers/apiSlice';\nimport fetcher from '../lib/fetcher';\nimport { setToastAlert } from \"../reducers/toastAlertSlice\"; // import SwaggerClient from 'swagger-client';\n// const scheme = process.env.REACT_APP_API_PROTOCOL || 'https';\n\nexport default function* sagas() {\n  yield takeEvery(({\n    payload: {\n      operationId = null\n    }\n  }) => {\n    return typeof operationId === 'string' && operationId.length > 0;\n  }, performApiAction);\n}\n\nfunction* performApiAction(action) {\n  const {\n    payload: {\n      output = 'output',\n      operationId = '',\n      parameters = {}\n    }\n  } = action;\n\n  try {\n    let response = yield call(() => fetcher(operationId, parameters));\n    /*\n    // FOR swaggerClient Support\n    const client  = yield call(() => SwaggerClient(\n    \t`${process.env.REACT_APP_T3_API}/${process.env.REACT_APP_T3_API_BASE_PATH}/swagger.json`\n    ));\n    \tlet response = {};\n    \tconst result = yield call(() => client.execute({\n    \t\tscheme,\n    \t\toperationId,\n    \t\tparameters\n    \t}));\n    \t\tresponse = result.obj;\n    */\n\n    if (response.message !== null) {\n      yield put(setToastAlert({\n        type: response.status,\n        message: response.message\n      }));\n    }\n\n    yield put(succeed({\n      response,\n      output\n    }));\n  } catch (error) {\n    yield put(failed({\n      error: error.response ? error.response.obj.error : {\n        message: 'Api call failed or check your internet connection'\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/home/shawon/Music/Employee-management-System/src/sagas/index.js"],"names":["call","put","takeEvery","failed","succeed","fetcher","setToastAlert","sagas","payload","operationId","length","performApiAction","action","output","parameters","response","message","type","status","error","obj"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,QAAmC,oBAAnC;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA+B,sBAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAAQC,aAAR,QAA4B,6BAA5B,C,CACA;AACA;;AAEA,eAAe,UAAUC,KAAV,GAAkB;AAChC,QAAML,SAAS,CAAC,CAAC;AACCM,IAAAA,OAAO,EAAE;AACRC,MAAAA,WAAW,GAAG;AADN;AADV,GAAD,KAIO;AACtB,WAAO,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,CAACC,MAAZ,GAAqB,CAA/D;AACA,GANc,EAMZC,gBANY,CAAf;AAOA;;AAED,UAAUA,gBAAV,CAA2BC,MAA3B,EAAmC;AAElC,QAAM;AACLJ,IAAAA,OAAO,EAAE;AACRK,MAAAA,MAAM,GAAG,QADD;AAERJ,MAAAA,WAAW,GAAG,EAFN;AAGRK,MAAAA,UAAU,GAAG;AAHL;AADJ,MAMFF,MANJ;;AAQA,MAAI;AAEH,QAAIG,QAAQ,GAAG,MAAMf,IAAI,CAAC,MAAMK,OAAO,CAACI,WAAD,EAAcK,UAAd,CAAd,CAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIE,QAAIC,QAAQ,CAACC,OAAT,KAAqB,IAAzB,EAA+B;AAC9B,YAAMf,GAAG,CAACK,aAAa,CAAC;AACvBW,QAAAA,IAAI,EAAEF,QAAQ,CAACG,MADQ;AAEvBF,QAAAA,OAAO,EAAED,QAAQ,CAACC;AAFK,OAAD,CAAd,CAAT;AAIA;;AAED,UAAMf,GAAG,CAACG,OAAO,CAAC;AACjBW,MAAAA,QADiB;AAEjBF,MAAAA;AAFiB,KAAD,CAAR,CAAT;AAKA,GAhCD,CAgCE,OAAOM,KAAP,EAAc;AAEf,UAAMlB,GAAG,CAACE,MAAM,CAAC;AAChBgB,MAAAA,KAAK,EAAEA,KAAK,CAACJ,QAAN,GACJI,KAAK,CAACJ,QAAN,CAAeK,GAAf,CAAmBD,KADf,GACuB;AAC5BH,QAAAA,OAAO,EAAE;AADmB;AAFd,KAAD,CAAP,CAAT;AAOA;AAED","sourcesContent":["import {call, put, takeEvery} from \"redux-saga/effects\";\nimport {failed, succeed,} from '../reducers/apiSlice';\nimport fetcher from '../lib/fetcher'\nimport {setToastAlert} from \"../reducers/toastAlertSlice\";\n// import SwaggerClient from 'swagger-client';\n// const scheme = process.env.REACT_APP_API_PROTOCOL || 'https';\n\nexport default function* sagas() {\n\tyield takeEvery(({\n\t\t                 payload: {\n\t\t\t                 operationId = null\n\t\t                 }\n\t                 }) => {\n\t\treturn typeof operationId === 'string' && operationId.length > 0;\n\t}, performApiAction);\n}\n\nfunction* performApiAction(action) {\n\n\tconst {\n\t\tpayload: {\n\t\t\toutput = 'output',\n\t\t\toperationId = '',\n\t\t\tparameters = {}\n\t\t}\n\t} = action;\n\n\ttry {\n\n\t\tlet response = yield call(() => fetcher(operationId, parameters));\n\n\t\t/*\n\t\t// FOR swaggerClient Support\n\t\tconst client  = yield call(() => SwaggerClient(\n\t\t\t`${process.env.REACT_APP_T3_API}/${process.env.REACT_APP_T3_API_BASE_PATH}/swagger.json`\n\t\t));\n\n\t\tlet response = {};\n\t\t\tconst result = yield call(() => client.execute({\n\t\t\t\tscheme,\n\t\t\t\toperationId,\n\t\t\t\tparameters\n\t\t\t}));\n\n\t\t\tresponse = result.obj;\n\t\t*/\n\n\t\tif (response.message !== null) {\n\t\t\tyield put(setToastAlert({\n\t\t\t\ttype: response.status,\n\t\t\t\tmessage: response.message\n\t\t\t}));\n\t\t}\n\n\t\tyield put(succeed({\n\t\t\tresponse,\n\t\t\toutput\n\t\t}));\n\n\t} catch (error) {\n\n\t\tyield put(failed({\n\t\t\terror: error.response\n\t\t\t\t? error.response.obj.error : {\n\t\t\t\t\tmessage: 'Api call failed or check your internet connection'\n\t\t\t\t}\n\t\t}));\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}